#-----------------------------------------------------------------------------
# Submission
#-----------------------------------------------------------------------------

enable sessions
 - create sessions db with secondary key of user
 - randomize token in login post
 - token validation for every page
    - retrieve and check if cookie token exists in session db
    - if so, retrieve user info using secondary UniKey
- login check needs to check if user is already logged in comparing to session db

helper method user to dict
 - should not have password field
 - is admin field should be status

download, and serve bootstrap cdn for css and javascript
  - style.css also imports google font

layout page
  - hide and show logo upon toggle
  - if user not logged in
    - show login and sign up buttons
    - show sign out and profile buttons

user profile page
  - hide edit profile and change password buttons
  - show message button

message page

CSS Front end for:
  - home
  - content (html, css)
  - about us & contact us
  - profile page, edit and change password pages
  - messages


#-----------------------------------------------------------------------------
# Extra
#-----------------------------------------------------------------------------

login page
  - prevent access if user is logged in

layout page
- (extra) javascript side bar active class

hashing password

snake case vs camel case
single or double quotes

#-----------------------------------------------------------------------------
# Authentication
#-----------------------------------------------------------------------------

https://stackoverflow.com/questions/17769011/how-does-cookie-based-authentication-work

Step 1: Client > Signing up

Before anything else, the user has to sign up. The client posts a HTTP request to the server containing his/her username and password.

Step 2: Server > Handling sign up

The server receives this request and hashes the password before storing the username and password in your database. This way, if someone gains access to your database they won't see your users' actual passwords.

Step 3: Client > User login

Now your user logs in. He/she provides their username/password and again, this is posted as a HTTP request to the server.

Step 4: Server > Validating login

The server looks up the username in the database, hashes the supplied login password, and compares it to the previously hashed password in the database. If it doesn't check out, we may deny them access by sending a 401 status code and ending the request.

Step 5: Server > Generating access token

If everything checks out, we're going to create an access token, which uniquely identifies the user's session. Still in the server, we do two things with the access token:

Store it in the database associated with that user
Attach it to a response cookie to be returned to the client. Be sure to set an expiration date/time to limit the user's session
Henceforth, the cookies will be attached to every request (and response) made between the client and server.

Step 6: Client > Making page requests

Back on the client side, we are now logged in. Every time the client makes a request for a page that requires authorization (i.e. they need to be logged in), the server obtains the access token from the cookie and checks it against the one in the database associated with that user. If it checks out, access is granted.

This should get you started. Be sure to clear the cookies upon logout!
